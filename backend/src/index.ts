import app from './app'
import { config } from './config'
import logger from './lib/logger'
import { testConnection } from './lib/database'
import fs from 'fs'
import path from 'path'

// Cr√©er le dossier de logs s'il n'existe pas
const logsDir = path.join(__dirname, '../logs')
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true })
}

// Gestion gracieuse des arr√™ts
process.on('SIGTERM', () => {
  logger.info('SIGTERM re√ßu, arr√™t gracieux du serveur...')
  process.exit(0)
})

process.on('SIGINT', () => {
  logger.info('SIGINT re√ßu, arr√™t gracieux du serveur...')
  process.exit(0)
})

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  logger.error('Exception non captur√©e', { error: error.message, stack: error.stack })
  process.exit(1)
})

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Promise rejet√©e non g√©r√©e', { reason, promise })
  process.exit(1)
})

// D√©marrage du serveur avec test de connexion base
const startServer = async () => {
  // Tester la connexion PostgreSQL
  const dbConnected = await testConnection()
  if (!dbConnected) {
    logger.error('‚ùå Impossible de se connecter √† PostgreSQL - arr√™t du serveur')
    process.exit(1)
  }

  const server = app.listen(config.PORT, () => {
    logger.info('üöÄ Serveur SparesTech d√©marr√©', {
      port: config.PORT,
      environment: config.NODE_ENV,
      nodeVersion: process.version,
      pid: process.pid
    })

    if (config.NODE_ENV === 'development') {
      console.log(`
    üî• SparesTech Backend API
    
    üìç Serveur: http://localhost:${config.PORT}
    üìä Health: http://localhost:${config.PORT}/api/health
    
    üè¢ Routes Startup:
    - POST /api/startup/auth/profile
    - GET  /api/startup/marketplace/plans  
    - POST /api/startup/marketplace/create
    
    üè™ Routes SaaS:
    - GET  /api/saas/:tenantId/products
    - POST /api/saas/:tenantId/products
    
    üìù Logs: backend/logs/
    `)
    }
  })

  // Timeout pour les requ√™tes longues
  server.timeout = 30000 // 30 secondes
  
  return server
}

// D√©marrer le serveur
startServer().catch((error) => {
  logger.error('Erreur lors du d√©marrage du serveur', { error })
  process.exit(1)
})